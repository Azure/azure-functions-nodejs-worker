variables: {
  WORKER_VERSION: '3.0.0',
  NODE_14: '14.x',
  NODE_16: '16.x'
}
name: $(WORKER_VERSION)-$(Date:yyyyMMdd)$(Rev:.r)

pr:
  branches:
    include:
      - v3.x

trigger:
- v3.x

jobs:
- job: UnitTests
  strategy:
    matrix:
      UBUNTU_NODE14:
        IMAGE_TYPE: 'ubuntu-latest'
        NODE_VERSION: $(NODE_14)
      UBUNTU_NODE16:
        IMAGE_TYPE: 'ubuntu-latest'
        NODE_VERSION: $(NODE_16)
      WINDOWS_NODE14:
        IMAGE_TYPE: 'windows-latest'
        NODE_VERSION: $(NODE_14)
      WINDOWS_NODE16:
        IMAGE_TYPE: 'windows-latest'
        NODE_VERSION: $(NODE_16)
      MAC_NODE14:
        IMAGE_TYPE: 'macOS-latest'
        NODE_VERSION: $(NODE_14)
      MAC_NODE16:
        IMAGE_TYPE: 'macOS-latest'
        NODE_VERSION: $(NODE_16)
  pool:
    vmImage: $(IMAGE_TYPE)
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: 'Install Node.js'
  - script: npm ci
    displayName: 'npm ci'
  - script: npm run build
    displayName: 'npm run build'
  - script: npm run lint
    displayName: 'npm run lint'
  - script: npm test
    displayName: 'Run unit tests'
  - task: PublishTestResults@2
    displayName: 'Publish Unit Test Results'
    inputs:
      testResultsFiles: 'test/unit-test-results.xml'
      testRunTitle: '$(Agent.JobName)'
    condition: succeededOrFailed()

- job: E2ETests
  strategy:
    maxParallel: 1
    matrix:
      UBUNTU_NODE14:
        IMAGE_TYPE: 'ubuntu-latest'
        NODE_VERSION: $(NODE_14)
      UBUNTU_NODE16:
        IMAGE_TYPE: 'ubuntu-latest'
        NODE_VERSION: $(NODE_16)
      WINDOWS_NODE14:
        IMAGE_TYPE: 'windows-latest'
        NODE_VERSION: $(NODE_14)
      WINDOWS_NODE16:
        IMAGE_TYPE: 'windows-latest'
        NODE_VERSION: $(NODE_16)
      MAC_NODE14:
        IMAGE_TYPE: 'macOS-latest'
        NODE_VERSION: $(NODE_14)
      MAC_NODE16:
        IMAGE_TYPE: 'macOS-latest'
        NODE_VERSION: $(NODE_16)
  pool:
    vmImage: $(IMAGE_TYPE)
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: 'Install Node.js'
  - script: npm ci
    displayName: 'npm ci'
  - script: npm run build
    displayName: 'npm run build'
  - task: UseDotNet@2
    displayName: 'Install .NET 6'
    inputs:
      version: 6.0.x
  - pwsh: |
      .\setup-e2e-tests.ps1
    displayName: 'Setup e2e tests'
  - powershell: |
      .\run-e2e-tests.ps1
    displayName: 'Run e2e tests'
    env:
      AzureWebJobsStorage: $(AzureWebJobsStorage)
      AzureWebJobsEventHubSender: $(AzureWebJobsEventHubSender)
      AzureWebJobsCosmosDBConnectionString: $(AzureWebJobsCosmosDBConnectionString)
      FUNCTIONS_WORKER_RUNTIME: 'node'
      languageWorkers:node:workerDirectory: $(System.DefaultWorkingDirectory)
      nodeVersion: $(NODE_VERSION)
  - task: PublishTestResults@2
    displayName: 'Publish E2E Test Results'
    condition: always()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: '$(Agent.JobName)'

- job: BuildArtifacts  
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_14)
    displayName: 'Install Node.js'
  - script: npm ci
    displayName: 'npm ci'
  - script: npm run build-nomaps
    displayName: 'npm run build-nomaps'
  - powershell: .\package.ps1
  - task: NuGetCommand@2
    inputs:
      command: pack
      packagesToPack: '$(System.DefaultWorkingDirectory)/pkg'
      packDestination: '$(Build.ArtifactStagingDirectory)/worker'
  - script: npm prune --production
    displayName: 'npm prune --production' # so that only production dependencies are included in SBOM
  - task: ManifestGeneratorTask@0
    displayName: 'Generate SBOM for worker'
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/worker'
      BuildComponentPath: '$(System.DefaultWorkingDirectory)/node_modules'
      PackageName: 'Azure Functions Node.js Worker'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish worker artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/worker'
      ArtifactName: 'worker'
  - task: NuGetCommand@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/v3.x'), eq(variables['UPLOADPACKAGETOPRERELEASEFEED'], true))
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'e6a70c92-4128-439f-8012-382fe78d6396/f37f760c-aebd-443e-9714-ce725cd427df'
      allowPackageConflicts: true
    displayName: 'Push NuGet package to the AzureFunctionsPreRelease feed'
  # In order for the SBOM to be accurate, we want to explicitly specify the components folder, but the types package doesn't have any components
  # We'll create an empty folder that _would_ store the components if it had any
  - bash: |
      mkdir types/node_modules
    displayName: 'mkdir types/node_modules'
  - script: npm pack
    displayName: 'npm pack types'
    workingDirectory: '$(System.DefaultWorkingDirectory)/types'
  - task: CopyFiles@2
    displayName: 'Copy types package to staging'
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)/types
      Contents: '*.tgz'
      TargetFolder: $(Build.ArtifactStagingDirectory)/types
  - task: ManifestGeneratorTask@0
    displayName: 'Generate SBOM for types'
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/types'
      BuildComponentPath: '$(System.DefaultWorkingDirectory)/types/node_modules'
      PackageName: 'Azure Functions Type Definitions'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish types artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/types'
      ArtifactName: 'types'
