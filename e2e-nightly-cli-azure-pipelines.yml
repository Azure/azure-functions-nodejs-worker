variables: {
  WORKER_VERSION: '2.1.2',
  NODE_12: '12.x'
}
name: $(WORKER_VERSION)-$(Date:yyyyMMdd)$(Rev:.r)

jobs:
- job: UnitTests
  strategy:
    matrix:
      WINDOWS_NODE10:
        IMAGE_TYPE: 'vs2017-win2016'
        NODE_VERSION: $(NODE_12)     
  pool:
    vmImage: $(IMAGE_TYPE)
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: 'Install Node.js for test'
  - script: npm install
    displayName: 'npm install'
  - script: npm run build
    displayName: 'npm run build'
  - script: npm test
    displayName: 'npm test'

- job: E2ETests
  strategy:
    maxParallel: 1
    matrix:
      NODE10:
        NODE_VERSION: $(NODE_12)
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    displayName: 'Install Node.js for test'
  - script: npm install
    displayName: 'npm install'
  - script: npm run build
    displayName: 'npm run build'
  - powershell: |
      .\setup-e2e-tests.ps1
    displayName: 'setup tests'
  - powershell: |
      .\run-e2e-tests.ps1
    env:
      AzureWebJobsStorage: $(AzureWebJobsStorage)
      AzureWebJobsEventHubSender: $(AzureWebJobsEventHubSender)
      AzureWebJobsCosmosDBConnectionString: $(AzureWebJobsCosmosDBConnectionString)
      FUNCTIONS_WORKER_RUNTIME: 'node'
      languageWorkers:node:workerDirectory: $(System.DefaultWorkingDirectory)
  - task: CopyFiles@2
    inputs:
     SourceFolder: '$(System.DefaultWorkingDirectory)/test/testResults'
     Contents: '*.trx'
     TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    inputs:
     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
     ArtifactName: 'testResults'
     publishLocation: 'Container'
  - pwsh: |
      Compress-Archive -Path $(System.DefaultWorkingDirectory)\test\end-to-end\testFunctionApp\* -DestinationPath $(System.DefaultWorkingDirectory)\test\e2etestsnode.zip
    displayName: 'Create test app zip file'
  - pwsh: |
      Install-Module Az.Storage -Force -Verbose -Scope CurrentUser
      if (-not (Get-command new-azstoragecontext -ea SilentlyContinue))
      {
        throw "new-azstoragecontext is not present"
      }
      $localFileE2ETests = '$(System.DefaultWorkingDirectory)\test\e2etestsnode.zip'
      if (Test-Path $localFileE2ETests)
      {
        Write-Host "File exists"
      } 
      $blobName = 'e2etestsnode.zip'
      $Context = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $(StorageAccountKey)
      Set-AzStorageBlobContent -File $localFileE2ETests -Container $(ContainerName) -Blob $blobName -Context $Context  -Force -Verbose
    env:
      AzureFunctionsE2ETestStorage: $(AzureFunctionsE2ETestStorage)
    displayName: 'Copying test app zip artifacts to blob'
  - powershell: .\package.ps1
    displayName: 'Creating nodeworker package'
  - pwsh: |
      Compress-Archive -Path $(System.DefaultWorkingDirectory)\pkg\* -DestinationPath $(System.DefaultWorkingDirectory)\nodeworker.zip
    displayName: 'Create nodeworker zip file'
  - pwsh: |
      $localFileNodeWorker = '$(System.DefaultWorkingDirectory)\nodeworker.zip'
      if (Test-Path $localFileNodeWorker)
      {
        Write-Host "localFileNodeWorker file exists"
      } 
      $blobNameNodeWorker = 'nodeworker.zip'
      $Context = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $(StorageAccountKey)
      Set-AzStorageBlobContent -File $localFileNodeWorker -Container $(ContainerName) -Blob $blobNameNodeWorker -Context $Context  -Force -Verbose
    env:
      AzureFunctionsE2ETestStorage: $(AzureFunctionsE2ETestStorage)
    displayName: 'Copying node worker zip to blob'