/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.exportSymbol('proto.FunctionRpc.FileChangeEventRequest', null, global);
goog.exportSymbol('proto.FunctionRpc.FileChangeEventRequest.Type', null, global);
goog.exportSymbol('proto.FunctionRpc.FileChangeEventResponse', null, global);
goog.exportSymbol('proto.FunctionRpc.FileChangeEventResponse.Action', null, global);
goog.exportSymbol('proto.FunctionRpc.FunctionLoadRequest', null, global);
goog.exportSymbol('proto.FunctionRpc.FunctionLoadResponse', null, global);
goog.exportSymbol('proto.FunctionRpc.InvocationCancel', null, global);
goog.exportSymbol('proto.FunctionRpc.InvocationRequest', null, global);
goog.exportSymbol('proto.FunctionRpc.InvocationResponse', null, global);
goog.exportSymbol('proto.FunctionRpc.ParameterBinding', null, global);
goog.exportSymbol('proto.FunctionRpc.RpcException', null, global);
goog.exportSymbol('proto.FunctionRpc.RpcFunctionMetadata', null, global);
goog.exportSymbol('proto.FunctionRpc.RpcHttp', null, global);
goog.exportSymbol('proto.FunctionRpc.RpcLog', null, global);
goog.exportSymbol('proto.FunctionRpc.RpcLog.Level', null, global);
goog.exportSymbol('proto.FunctionRpc.StartStream', null, global);
goog.exportSymbol('proto.FunctionRpc.StatusResult', null, global);
goog.exportSymbol('proto.FunctionRpc.StatusResult.Status', null, global);
goog.exportSymbol('proto.FunctionRpc.StreamingMessage', null, global);
goog.exportSymbol('proto.FunctionRpc.StreamingMessage.Type', null, global);
goog.exportSymbol('proto.FunctionRpc.TypedData', null, global);
goog.exportSymbol('proto.FunctionRpc.TypedData.Type', null, global);
goog.exportSymbol('proto.FunctionRpc.WorkerHeartbeat', null, global);
goog.exportSymbol('proto.FunctionRpc.WorkerInitRequest', null, global);
goog.exportSymbol('proto.FunctionRpc.WorkerInitResponse', null, global);
goog.exportSymbol('proto.FunctionRpc.WorkerStatusRequest', null, global);
goog.exportSymbol('proto.FunctionRpc.WorkerStatusResponse', null, global);
goog.exportSymbol('proto.FunctionRpc.WorkerTerminate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.StreamingMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.StreamingMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.StreamingMessage.displayName = 'proto.FunctionRpc.StreamingMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.StreamingMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.StreamingMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.StreamingMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.StreamingMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: (f = msg.getContent()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.StreamingMessage}
 */
proto.FunctionRpc.StreamingMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.StreamingMessage;
  return proto.FunctionRpc.StreamingMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.StreamingMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.StreamingMessage}
 */
proto.FunctionRpc.StreamingMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FunctionRpc.StreamingMessage.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.StreamingMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.StreamingMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.StreamingMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.StreamingMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.FunctionRpc.StreamingMessage.Type = {
  STARTSTREAM: 0,
  WORKERINITREQUEST: 1,
  WORKERINITRESPONSE: 2,
  WORKERHEARTBEAT: 3,
  WORKERTERMINATE: 4,
  WORKERSTATUSREQUEST: 5,
  WORKERSTATUSRESPONSE: 6,
  FILECHANGEEVENTREQUEST: 8,
  FILECHANGEEVENTRESPONSE: 9,
  FUNCTIONLOADREQUEST: 10,
  FUNCTIONLOADRESPONSE: 11,
  INVOCATIONREQUEST: 12,
  INVOCATIONRESPONSE: 14,
  INVOCATIONCANCEL: 15,
  RPCLOG: 19
};

/**
 * optional Type type = 1;
 * @return {!proto.FunctionRpc.StreamingMessage.Type}
 */
proto.FunctionRpc.StreamingMessage.prototype.getType = function() {
  return /** @type {!proto.FunctionRpc.StreamingMessage.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.FunctionRpc.StreamingMessage.Type} value */
proto.FunctionRpc.StreamingMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional google.protobuf.Any content = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.FunctionRpc.StreamingMessage.prototype.getContent = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.FunctionRpc.StreamingMessage.prototype.setContent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FunctionRpc.StreamingMessage.prototype.clearContent = function() {
  this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.StreamingMessage.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string request_id = 3;
 * @return {string}
 */
proto.FunctionRpc.StreamingMessage.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.FunctionRpc.StreamingMessage.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.StartStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.StartStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.StartStream.displayName = 'proto.FunctionRpc.StartStream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.StartStream.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.StartStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.StartStream} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.StartStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    workerId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.StartStream}
 */
proto.FunctionRpc.StartStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.StartStream;
  return proto.FunctionRpc.StartStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.StartStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.StartStream}
 */
proto.FunctionRpc.StartStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.StartStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.StartStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.StartStream} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.StartStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string worker_id = 2;
 * @return {string}
 */
proto.FunctionRpc.StartStream.prototype.getWorkerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.StartStream.prototype.setWorkerId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.WorkerInitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.WorkerInitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.WorkerInitRequest.displayName = 'proto.FunctionRpc.WorkerInitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.WorkerInitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.WorkerInitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.WorkerInitRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.WorkerInitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    capabilitesMap: (f = msg.getCapabilitesMap()) ? f.toObject(includeInstance, undefined) : [],
    logCategoriesMap: (f = msg.getLogCategoriesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.WorkerInitRequest}
 */
proto.FunctionRpc.WorkerInitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.WorkerInitRequest;
  return proto.FunctionRpc.WorkerInitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.WorkerInitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.WorkerInitRequest}
 */
proto.FunctionRpc.WorkerInitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostVersion(value);
      break;
    case 2:
      var value = msg.getCapabilitesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 3:
      var value = msg.getLogCategoriesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.WorkerInitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.WorkerInitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.WorkerInitRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.WorkerInitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCapabilitesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLogCategoriesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * optional string host_version = 1;
 * @return {string}
 */
proto.FunctionRpc.WorkerInitRequest.prototype.getHostVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.WorkerInitRequest.prototype.setHostVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, string> capabilites = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.FunctionRpc.WorkerInitRequest.prototype.getCapabilitesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.FunctionRpc.WorkerInitRequest.prototype.clearCapabilitesMap = function() {
  this.getCapabilitesMap().clear();
};


/**
 * map<string, RpcLog.Level> log_categories = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.FunctionRpc.RpcLog.Level>}
 */
proto.FunctionRpc.WorkerInitRequest.prototype.getLogCategoriesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.FunctionRpc.RpcLog.Level>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.FunctionRpc.WorkerInitRequest.prototype.clearLogCategoriesMap = function() {
  this.getLogCategoriesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.WorkerInitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.WorkerInitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.WorkerInitResponse.displayName = 'proto.FunctionRpc.WorkerInitResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.WorkerInitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.WorkerInitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.WorkerInitResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.WorkerInitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    workerVersion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    capabilitesMap: (f = msg.getCapabilitesMap()) ? f.toObject(includeInstance, undefined) : [],
    result: (f = msg.getResult()) && proto.FunctionRpc.StatusResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.WorkerInitResponse}
 */
proto.FunctionRpc.WorkerInitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.WorkerInitResponse;
  return proto.FunctionRpc.WorkerInitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.WorkerInitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.WorkerInitResponse}
 */
proto.FunctionRpc.WorkerInitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerVersion(value);
      break;
    case 2:
      var value = msg.getCapabilitesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 3:
      var value = new proto.FunctionRpc.StatusResult;
      reader.readMessage(value,proto.FunctionRpc.StatusResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.WorkerInitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.WorkerInitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.WorkerInitResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.WorkerInitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkerVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCapabilitesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.FunctionRpc.StatusResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string worker_version = 1;
 * @return {string}
 */
proto.FunctionRpc.WorkerInitResponse.prototype.getWorkerVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.WorkerInitResponse.prototype.setWorkerVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, string> capabilites = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.FunctionRpc.WorkerInitResponse.prototype.getCapabilitesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.FunctionRpc.WorkerInitResponse.prototype.clearCapabilitesMap = function() {
  this.getCapabilitesMap().clear();
};


/**
 * optional StatusResult result = 3;
 * @return {?proto.FunctionRpc.StatusResult}
 */
proto.FunctionRpc.WorkerInitResponse.prototype.getResult = function() {
  return /** @type{?proto.FunctionRpc.StatusResult} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.StatusResult, 3));
};


/** @param {?proto.FunctionRpc.StatusResult|undefined} value */
proto.FunctionRpc.WorkerInitResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.FunctionRpc.WorkerInitResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.WorkerInitResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.StatusResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FunctionRpc.StatusResult.repeatedFields_, null);
};
goog.inherits(proto.FunctionRpc.StatusResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.StatusResult.displayName = 'proto.FunctionRpc.StatusResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FunctionRpc.StatusResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.StatusResult.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.StatusResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.StatusResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.StatusResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    result: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exception: (f = msg.getException()) && proto.FunctionRpc.RpcException.toObject(includeInstance, f),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.FunctionRpc.RpcLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.StatusResult}
 */
proto.FunctionRpc.StatusResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.StatusResult;
  return proto.FunctionRpc.StatusResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.StatusResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.StatusResult}
 */
proto.FunctionRpc.StatusResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!proto.FunctionRpc.StatusResult.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.FunctionRpc.RpcException;
      reader.readMessage(value,proto.FunctionRpc.RpcException.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    case 3:
      var value = new proto.FunctionRpc.RpcLog;
      reader.readMessage(value,proto.FunctionRpc.RpcLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.StatusResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.StatusResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.StatusResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.StatusResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FunctionRpc.RpcException.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.FunctionRpc.RpcLog.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.FunctionRpc.StatusResult.Status = {
  FAILURE: 0,
  SUCCESS: 1,
  CANCELLED: 2
};

/**
 * optional Status status = 4;
 * @return {!proto.FunctionRpc.StatusResult.Status}
 */
proto.FunctionRpc.StatusResult.prototype.getStatus = function() {
  return /** @type {!proto.FunctionRpc.StatusResult.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.FunctionRpc.StatusResult.Status} value */
proto.FunctionRpc.StatusResult.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.FunctionRpc.StatusResult.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.StatusResult.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional RpcException exception = 2;
 * @return {?proto.FunctionRpc.RpcException}
 */
proto.FunctionRpc.StatusResult.prototype.getException = function() {
  return /** @type{?proto.FunctionRpc.RpcException} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.RpcException, 2));
};


/** @param {?proto.FunctionRpc.RpcException|undefined} value */
proto.FunctionRpc.StatusResult.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FunctionRpc.StatusResult.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.StatusResult.prototype.hasException = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated RpcLog logs = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.FunctionRpc.RpcLog>}
 */
proto.FunctionRpc.StatusResult.prototype.getLogsList = function() {
  return /** @type{!Array.<!proto.FunctionRpc.RpcLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FunctionRpc.RpcLog, 3));
};


/** @param {!Array.<!proto.FunctionRpc.RpcLog>} value */
proto.FunctionRpc.StatusResult.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.FunctionRpc.RpcLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FunctionRpc.RpcLog}
 */
proto.FunctionRpc.StatusResult.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.FunctionRpc.RpcLog, opt_index);
};


proto.FunctionRpc.StatusResult.prototype.clearLogsList = function() {
  this.setLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.WorkerHeartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.WorkerHeartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.WorkerHeartbeat.displayName = 'proto.FunctionRpc.WorkerHeartbeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.WorkerHeartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.WorkerHeartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.WorkerHeartbeat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.WorkerHeartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.WorkerHeartbeat}
 */
proto.FunctionRpc.WorkerHeartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.WorkerHeartbeat;
  return proto.FunctionRpc.WorkerHeartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.WorkerHeartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.WorkerHeartbeat}
 */
proto.FunctionRpc.WorkerHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.WorkerHeartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.WorkerHeartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.WorkerHeartbeat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.WorkerHeartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.WorkerTerminate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.WorkerTerminate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.WorkerTerminate.displayName = 'proto.FunctionRpc.WorkerTerminate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.WorkerTerminate.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.WorkerTerminate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.WorkerTerminate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.WorkerTerminate.toObject = function(includeInstance, msg) {
  var f, obj = {
    gracePeriod: (f = msg.getGracePeriod()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.WorkerTerminate}
 */
proto.FunctionRpc.WorkerTerminate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.WorkerTerminate;
  return proto.FunctionRpc.WorkerTerminate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.WorkerTerminate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.WorkerTerminate}
 */
proto.FunctionRpc.WorkerTerminate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setGracePeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.WorkerTerminate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.WorkerTerminate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.WorkerTerminate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.WorkerTerminate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGracePeriod();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration grace_period = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.FunctionRpc.WorkerTerminate.prototype.getGracePeriod = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.FunctionRpc.WorkerTerminate.prototype.setGracePeriod = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.FunctionRpc.WorkerTerminate.prototype.clearGracePeriod = function() {
  this.setGracePeriod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.WorkerTerminate.prototype.hasGracePeriod = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.FileChangeEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.FileChangeEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.FileChangeEventRequest.displayName = 'proto.FunctionRpc.FileChangeEventRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.FileChangeEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.FileChangeEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.FileChangeEventRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.FileChangeEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fullPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.FileChangeEventRequest}
 */
proto.FunctionRpc.FileChangeEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.FileChangeEventRequest;
  return proto.FunctionRpc.FileChangeEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.FileChangeEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.FileChangeEventRequest}
 */
proto.FunctionRpc.FileChangeEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FunctionRpc.FileChangeEventRequest.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.FileChangeEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.FileChangeEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.FileChangeEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.FileChangeEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFullPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.FunctionRpc.FileChangeEventRequest.Type = {
  UNKNOWN: 0,
  CREATED: 1,
  DELETED: 2,
  CHANGED: 4,
  RENAMED: 8,
  ALL: 15
};

/**
 * optional Type type = 1;
 * @return {!proto.FunctionRpc.FileChangeEventRequest.Type}
 */
proto.FunctionRpc.FileChangeEventRequest.prototype.getType = function() {
  return /** @type {!proto.FunctionRpc.FileChangeEventRequest.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.FunctionRpc.FileChangeEventRequest.Type} value */
proto.FunctionRpc.FileChangeEventRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string full_path = 2;
 * @return {string}
 */
proto.FunctionRpc.FileChangeEventRequest.prototype.getFullPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.FileChangeEventRequest.prototype.setFullPath = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.FunctionRpc.FileChangeEventRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.FunctionRpc.FileChangeEventRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.FileChangeEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FunctionRpc.FileChangeEventResponse.repeatedFields_, null);
};
goog.inherits(proto.FunctionRpc.FileChangeEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.FileChangeEventResponse.displayName = 'proto.FunctionRpc.FileChangeEventResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FunctionRpc.FileChangeEventResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.FileChangeEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.FileChangeEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.FileChangeEventResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.FileChangeEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    functionIdsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.FileChangeEventResponse}
 */
proto.FunctionRpc.FileChangeEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.FileChangeEventResponse;
  return proto.FunctionRpc.FileChangeEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.FileChangeEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.FileChangeEventResponse}
 */
proto.FunctionRpc.FileChangeEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FunctionRpc.FileChangeEventResponse.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFunctionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.FileChangeEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.FileChangeEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.FileChangeEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.FileChangeEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFunctionIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.FunctionRpc.FileChangeEventResponse.Action = {
  IGNORE: 0,
  RESTART: 1,
  RELOAD: 2
};

/**
 * optional Action action = 1;
 * @return {!proto.FunctionRpc.FileChangeEventResponse.Action}
 */
proto.FunctionRpc.FileChangeEventResponse.prototype.getAction = function() {
  return /** @type {!proto.FunctionRpc.FileChangeEventResponse.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.FunctionRpc.FileChangeEventResponse.Action} value */
proto.FunctionRpc.FileChangeEventResponse.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string function_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.FunctionRpc.FileChangeEventResponse.prototype.getFunctionIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.FunctionRpc.FileChangeEventResponse.prototype.setFunctionIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.FunctionRpc.FileChangeEventResponse.prototype.addFunctionIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.FunctionRpc.FileChangeEventResponse.prototype.clearFunctionIdsList = function() {
  this.setFunctionIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.WorkerStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.WorkerStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.WorkerStatusRequest.displayName = 'proto.FunctionRpc.WorkerStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.WorkerStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.WorkerStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.WorkerStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.WorkerStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.WorkerStatusRequest}
 */
proto.FunctionRpc.WorkerStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.WorkerStatusRequest;
  return proto.FunctionRpc.WorkerStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.WorkerStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.WorkerStatusRequest}
 */
proto.FunctionRpc.WorkerStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.WorkerStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.WorkerStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.WorkerStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.WorkerStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.WorkerStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.WorkerStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.WorkerStatusResponse.displayName = 'proto.FunctionRpc.WorkerStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.WorkerStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.WorkerStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.WorkerStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.WorkerStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.WorkerStatusResponse}
 */
proto.FunctionRpc.WorkerStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.WorkerStatusResponse;
  return proto.FunctionRpc.WorkerStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.WorkerStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.WorkerStatusResponse}
 */
proto.FunctionRpc.WorkerStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.WorkerStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.WorkerStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.WorkerStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.WorkerStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.FunctionLoadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.FunctionLoadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.FunctionLoadRequest.displayName = 'proto.FunctionRpc.FunctionLoadRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.FunctionLoadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.FunctionLoadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.FunctionLoadRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.FunctionLoadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metadata: (f = msg.getMetadata()) && proto.FunctionRpc.RpcFunctionMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.FunctionLoadRequest}
 */
proto.FunctionRpc.FunctionLoadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.FunctionLoadRequest;
  return proto.FunctionRpc.FunctionLoadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.FunctionLoadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.FunctionLoadRequest}
 */
proto.FunctionRpc.FunctionLoadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionId(value);
      break;
    case 2:
      var value = new proto.FunctionRpc.RpcFunctionMetadata;
      reader.readMessage(value,proto.FunctionRpc.RpcFunctionMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.FunctionLoadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.FunctionLoadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.FunctionLoadRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.FunctionLoadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FunctionRpc.RpcFunctionMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string function_id = 1;
 * @return {string}
 */
proto.FunctionRpc.FunctionLoadRequest.prototype.getFunctionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.FunctionLoadRequest.prototype.setFunctionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional RpcFunctionMetadata metadata = 2;
 * @return {?proto.FunctionRpc.RpcFunctionMetadata}
 */
proto.FunctionRpc.FunctionLoadRequest.prototype.getMetadata = function() {
  return /** @type{?proto.FunctionRpc.RpcFunctionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.RpcFunctionMetadata, 2));
};


/** @param {?proto.FunctionRpc.RpcFunctionMetadata|undefined} value */
proto.FunctionRpc.FunctionLoadRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FunctionRpc.FunctionLoadRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.FunctionLoadRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.FunctionLoadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.FunctionLoadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.FunctionLoadResponse.displayName = 'proto.FunctionRpc.FunctionLoadResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.FunctionLoadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.FunctionLoadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.FunctionLoadResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.FunctionLoadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: (f = msg.getResult()) && proto.FunctionRpc.StatusResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.FunctionLoadResponse}
 */
proto.FunctionRpc.FunctionLoadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.FunctionLoadResponse;
  return proto.FunctionRpc.FunctionLoadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.FunctionLoadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.FunctionLoadResponse}
 */
proto.FunctionRpc.FunctionLoadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionId(value);
      break;
    case 2:
      var value = new proto.FunctionRpc.StatusResult;
      reader.readMessage(value,proto.FunctionRpc.StatusResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.FunctionLoadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.FunctionLoadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.FunctionLoadResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.FunctionLoadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FunctionRpc.StatusResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string function_id = 1;
 * @return {string}
 */
proto.FunctionRpc.FunctionLoadResponse.prototype.getFunctionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.FunctionLoadResponse.prototype.setFunctionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StatusResult result = 2;
 * @return {?proto.FunctionRpc.StatusResult}
 */
proto.FunctionRpc.FunctionLoadResponse.prototype.getResult = function() {
  return /** @type{?proto.FunctionRpc.StatusResult} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.StatusResult, 2));
};


/** @param {?proto.FunctionRpc.StatusResult|undefined} value */
proto.FunctionRpc.FunctionLoadResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FunctionRpc.FunctionLoadResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.FunctionLoadResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.RpcFunctionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.RpcFunctionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.RpcFunctionMetadata.displayName = 'proto.FunctionRpc.RpcFunctionMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.RpcFunctionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.RpcFunctionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.RpcFunctionMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.RpcFunctionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    directory: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scriptFile: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entryPoint: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.RpcFunctionMetadata}
 */
proto.FunctionRpc.RpcFunctionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.RpcFunctionMetadata;
  return proto.FunctionRpc.RpcFunctionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.RpcFunctionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.RpcFunctionMetadata}
 */
proto.FunctionRpc.RpcFunctionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptFile(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.RpcFunctionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.RpcFunctionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.RpcFunctionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.RpcFunctionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDirectory();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScriptFile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntryPoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.FunctionRpc.RpcFunctionMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcFunctionMetadata.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string directory = 1;
 * @return {string}
 */
proto.FunctionRpc.RpcFunctionMetadata.prototype.getDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcFunctionMetadata.prototype.setDirectory = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string script_file = 2;
 * @return {string}
 */
proto.FunctionRpc.RpcFunctionMetadata.prototype.getScriptFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcFunctionMetadata.prototype.setScriptFile = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string entry_point = 3;
 * @return {string}
 */
proto.FunctionRpc.RpcFunctionMetadata.prototype.getEntryPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcFunctionMetadata.prototype.setEntryPoint = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.InvocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FunctionRpc.InvocationRequest.repeatedFields_, null);
};
goog.inherits(proto.FunctionRpc.InvocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.InvocationRequest.displayName = 'proto.FunctionRpc.InvocationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FunctionRpc.InvocationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.InvocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.InvocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.InvocationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.InvocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    functionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inputDataList: jspb.Message.toObjectList(msg.getInputDataList(),
    proto.FunctionRpc.ParameterBinding.toObject, includeInstance),
    triggerMetadataMap: (f = msg.getTriggerMetadataMap()) ? f.toObject(includeInstance, proto.FunctionRpc.TypedData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.InvocationRequest}
 */
proto.FunctionRpc.InvocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.InvocationRequest;
  return proto.FunctionRpc.InvocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.InvocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.InvocationRequest}
 */
proto.FunctionRpc.InvocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvocationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionId(value);
      break;
    case 3:
      var value = new proto.FunctionRpc.ParameterBinding;
      reader.readMessage(value,proto.FunctionRpc.ParameterBinding.deserializeBinaryFromReader);
      msg.addInputData(value);
      break;
    case 4:
      var value = msg.getTriggerMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.FunctionRpc.TypedData.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.InvocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.InvocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.InvocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.InvocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunctionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInputDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.FunctionRpc.ParameterBinding.serializeBinaryToWriter
    );
  }
  f = message.getTriggerMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.FunctionRpc.TypedData.serializeBinaryToWriter);
  }
};


/**
 * optional string invocation_id = 1;
 * @return {string}
 */
proto.FunctionRpc.InvocationRequest.prototype.getInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.InvocationRequest.prototype.setInvocationId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string function_id = 2;
 * @return {string}
 */
proto.FunctionRpc.InvocationRequest.prototype.getFunctionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.InvocationRequest.prototype.setFunctionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ParameterBinding input_data = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.FunctionRpc.ParameterBinding>}
 */
proto.FunctionRpc.InvocationRequest.prototype.getInputDataList = function() {
  return /** @type{!Array.<!proto.FunctionRpc.ParameterBinding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FunctionRpc.ParameterBinding, 3));
};


/** @param {!Array.<!proto.FunctionRpc.ParameterBinding>} value */
proto.FunctionRpc.InvocationRequest.prototype.setInputDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.FunctionRpc.ParameterBinding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FunctionRpc.ParameterBinding}
 */
proto.FunctionRpc.InvocationRequest.prototype.addInputData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.FunctionRpc.ParameterBinding, opt_index);
};


proto.FunctionRpc.InvocationRequest.prototype.clearInputDataList = function() {
  this.setInputDataList([]);
};


/**
 * map<string, TypedData> trigger_metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.FunctionRpc.TypedData>}
 */
proto.FunctionRpc.InvocationRequest.prototype.getTriggerMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.FunctionRpc.TypedData>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.FunctionRpc.TypedData));
};


proto.FunctionRpc.InvocationRequest.prototype.clearTriggerMetadataMap = function() {
  this.getTriggerMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.InvocationCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.InvocationCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.InvocationCancel.displayName = 'proto.FunctionRpc.InvocationCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.InvocationCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.InvocationCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.InvocationCancel} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.InvocationCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gracePeriod: (f = msg.getGracePeriod()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.InvocationCancel}
 */
proto.FunctionRpc.InvocationCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.InvocationCancel;
  return proto.FunctionRpc.InvocationCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.InvocationCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.InvocationCancel}
 */
proto.FunctionRpc.InvocationCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvocationId(value);
      break;
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setGracePeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.InvocationCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.InvocationCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.InvocationCancel} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.InvocationCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGracePeriod();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string invocation_id = 2;
 * @return {string}
 */
proto.FunctionRpc.InvocationCancel.prototype.getInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.InvocationCancel.prototype.setInvocationId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Duration grace_period = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.FunctionRpc.InvocationCancel.prototype.getGracePeriod = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.FunctionRpc.InvocationCancel.prototype.setGracePeriod = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.FunctionRpc.InvocationCancel.prototype.clearGracePeriod = function() {
  this.setGracePeriod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.InvocationCancel.prototype.hasGracePeriod = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.InvocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FunctionRpc.InvocationResponse.repeatedFields_, null);
};
goog.inherits(proto.FunctionRpc.InvocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.InvocationResponse.displayName = 'proto.FunctionRpc.InvocationResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FunctionRpc.InvocationResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.InvocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.InvocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.InvocationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.InvocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputDataList: jspb.Message.toObjectList(msg.getOutputDataList(),
    proto.FunctionRpc.ParameterBinding.toObject, includeInstance),
    result: (f = msg.getResult()) && proto.FunctionRpc.StatusResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.InvocationResponse}
 */
proto.FunctionRpc.InvocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.InvocationResponse;
  return proto.FunctionRpc.InvocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.InvocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.InvocationResponse}
 */
proto.FunctionRpc.InvocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvocationId(value);
      break;
    case 2:
      var value = new proto.FunctionRpc.ParameterBinding;
      reader.readMessage(value,proto.FunctionRpc.ParameterBinding.deserializeBinaryFromReader);
      msg.addOutputData(value);
      break;
    case 3:
      var value = new proto.FunctionRpc.StatusResult;
      reader.readMessage(value,proto.FunctionRpc.StatusResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.InvocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.InvocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.InvocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.InvocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.FunctionRpc.ParameterBinding.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.FunctionRpc.StatusResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string invocation_id = 1;
 * @return {string}
 */
proto.FunctionRpc.InvocationResponse.prototype.getInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.InvocationResponse.prototype.setInvocationId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ParameterBinding output_data = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.FunctionRpc.ParameterBinding>}
 */
proto.FunctionRpc.InvocationResponse.prototype.getOutputDataList = function() {
  return /** @type{!Array.<!proto.FunctionRpc.ParameterBinding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FunctionRpc.ParameterBinding, 2));
};


/** @param {!Array.<!proto.FunctionRpc.ParameterBinding>} value */
proto.FunctionRpc.InvocationResponse.prototype.setOutputDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.FunctionRpc.ParameterBinding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FunctionRpc.ParameterBinding}
 */
proto.FunctionRpc.InvocationResponse.prototype.addOutputData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.FunctionRpc.ParameterBinding, opt_index);
};


proto.FunctionRpc.InvocationResponse.prototype.clearOutputDataList = function() {
  this.setOutputDataList([]);
};


/**
 * optional StatusResult result = 3;
 * @return {?proto.FunctionRpc.StatusResult}
 */
proto.FunctionRpc.InvocationResponse.prototype.getResult = function() {
  return /** @type{?proto.FunctionRpc.StatusResult} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.StatusResult, 3));
};


/** @param {?proto.FunctionRpc.StatusResult|undefined} value */
proto.FunctionRpc.InvocationResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.FunctionRpc.InvocationResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.InvocationResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.TypedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.TypedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.TypedData.displayName = 'proto.FunctionRpc.TypedData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.TypedData.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.TypedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.TypedData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.TypedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stringVal: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bytesVal: msg.getBytesVal_asB64(),
    httpVal: (f = msg.getHttpVal()) && proto.FunctionRpc.RpcHttp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.TypedData}
 */
proto.FunctionRpc.TypedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.TypedData;
  return proto.FunctionRpc.TypedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.TypedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.TypedData}
 */
proto.FunctionRpc.TypedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FunctionRpc.TypedData.Type} */ (reader.readEnum());
      msg.setTypeVal(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringVal(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesVal(value);
      break;
    case 5:
      var value = new proto.FunctionRpc.RpcHttp;
      reader.readMessage(value,proto.FunctionRpc.RpcHttp.deserializeBinaryFromReader);
      msg.setHttpVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.TypedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.TypedData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.TypedData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.TypedData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVal();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStringVal();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBytesVal_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getHttpVal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.FunctionRpc.RpcHttp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.FunctionRpc.TypedData.Type = {
  STRING: 0,
  JSON: 1,
  BYTES: 2,
  STREAM: 3,
  HTTP: 4
};

/**
 * optional Type type_val = 1;
 * @return {!proto.FunctionRpc.TypedData.Type}
 */
proto.FunctionRpc.TypedData.prototype.getTypeVal = function() {
  return /** @type {!proto.FunctionRpc.TypedData.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.FunctionRpc.TypedData.Type} value */
proto.FunctionRpc.TypedData.prototype.setTypeVal = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string string_val = 2;
 * @return {string}
 */
proto.FunctionRpc.TypedData.prototype.getStringVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.TypedData.prototype.setStringVal = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes bytes_val = 4;
 * @return {!(string|Uint8Array)}
 */
proto.FunctionRpc.TypedData.prototype.getBytesVal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bytes_val = 4;
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {string}
 */
proto.FunctionRpc.TypedData.prototype.getBytesVal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesVal()));
};


/**
 * optional bytes bytes_val = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesVal()`
 * @return {!Uint8Array}
 */
proto.FunctionRpc.TypedData.prototype.getBytesVal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesVal()));
};


/** @param {!(string|Uint8Array)} value */
proto.FunctionRpc.TypedData.prototype.setBytesVal = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional RpcHttp http_val = 5;
 * @return {?proto.FunctionRpc.RpcHttp}
 */
proto.FunctionRpc.TypedData.prototype.getHttpVal = function() {
  return /** @type{?proto.FunctionRpc.RpcHttp} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.RpcHttp, 5));
};


/** @param {?proto.FunctionRpc.RpcHttp|undefined} value */
proto.FunctionRpc.TypedData.prototype.setHttpVal = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.FunctionRpc.TypedData.prototype.clearHttpVal = function() {
  this.setHttpVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.TypedData.prototype.hasHttpVal = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.ParameterBinding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.ParameterBinding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.ParameterBinding.displayName = 'proto.FunctionRpc.ParameterBinding';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.ParameterBinding.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.ParameterBinding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.ParameterBinding} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.ParameterBinding.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.FunctionRpc.TypedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.ParameterBinding}
 */
proto.FunctionRpc.ParameterBinding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.ParameterBinding;
  return proto.FunctionRpc.ParameterBinding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.ParameterBinding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.ParameterBinding}
 */
proto.FunctionRpc.ParameterBinding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.FunctionRpc.TypedData;
      reader.readMessage(value,proto.FunctionRpc.TypedData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.ParameterBinding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.ParameterBinding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.ParameterBinding} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.ParameterBinding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FunctionRpc.TypedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.FunctionRpc.ParameterBinding.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.ParameterBinding.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TypedData data = 2;
 * @return {?proto.FunctionRpc.TypedData}
 */
proto.FunctionRpc.ParameterBinding.prototype.getData = function() {
  return /** @type{?proto.FunctionRpc.TypedData} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.TypedData, 2));
};


/** @param {?proto.FunctionRpc.TypedData|undefined} value */
proto.FunctionRpc.ParameterBinding.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FunctionRpc.ParameterBinding.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.ParameterBinding.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.RpcLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.RpcLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.RpcLog.displayName = 'proto.FunctionRpc.RpcLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.RpcLog.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.RpcLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.RpcLog} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.RpcLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    invocationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    category: jspb.Message.getFieldWithDefault(msg, 2, ""),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    exception: (f = msg.getException()) && proto.FunctionRpc.RpcException.toObject(includeInstance, f),
    properties: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.RpcLog}
 */
proto.FunctionRpc.RpcLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.RpcLog;
  return proto.FunctionRpc.RpcLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.RpcLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.RpcLog}
 */
proto.FunctionRpc.RpcLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvocationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 3:
      var value = /** @type {!proto.FunctionRpc.RpcLog.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 6:
      var value = new proto.FunctionRpc.RpcException;
      reader.readMessage(value,proto.FunctionRpc.RpcException.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.RpcLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.RpcLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.RpcLog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.RpcLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvocationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.FunctionRpc.RpcException.serializeBinaryToWriter
    );
  }
  f = message.getProperties();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.FunctionRpc.RpcLog.Level = {
  TRACE: 0,
  DEBUG: 1,
  INFORMATION: 2,
  WARNING: 3,
  ERROR: 4,
  CRITICAL: 5,
  NONE: 6
};

/**
 * optional string invocation_id = 1;
 * @return {string}
 */
proto.FunctionRpc.RpcLog.prototype.getInvocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcLog.prototype.setInvocationId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string category = 2;
 * @return {string}
 */
proto.FunctionRpc.RpcLog.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcLog.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Level level = 3;
 * @return {!proto.FunctionRpc.RpcLog.Level}
 */
proto.FunctionRpc.RpcLog.prototype.getLevel = function() {
  return /** @type {!proto.FunctionRpc.RpcLog.Level} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.FunctionRpc.RpcLog.Level} value */
proto.FunctionRpc.RpcLog.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.FunctionRpc.RpcLog.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcLog.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string event_id = 5;
 * @return {string}
 */
proto.FunctionRpc.RpcLog.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcLog.prototype.setEventId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional RpcException exception = 6;
 * @return {?proto.FunctionRpc.RpcException}
 */
proto.FunctionRpc.RpcLog.prototype.getException = function() {
  return /** @type{?proto.FunctionRpc.RpcException} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.RpcException, 6));
};


/** @param {?proto.FunctionRpc.RpcException|undefined} value */
proto.FunctionRpc.RpcLog.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.FunctionRpc.RpcLog.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.RpcLog.prototype.hasException = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string properties = 7;
 * @return {string}
 */
proto.FunctionRpc.RpcLog.prototype.getProperties = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcLog.prototype.setProperties = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.RpcException = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.RpcException, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.RpcException.displayName = 'proto.FunctionRpc.RpcException';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.RpcException.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.RpcException.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.RpcException} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.RpcException.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stackTrace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.RpcException}
 */
proto.FunctionRpc.RpcException.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.RpcException;
  return proto.FunctionRpc.RpcException.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.RpcException} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.RpcException}
 */
proto.FunctionRpc.RpcException.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStackTrace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.RpcException.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.RpcException.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.RpcException} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.RpcException.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStackTrace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.FunctionRpc.RpcException.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcException.prototype.setSource = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string stack_trace = 1;
 * @return {string}
 */
proto.FunctionRpc.RpcException.prototype.getStackTrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcException.prototype.setStackTrace = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.FunctionRpc.RpcException.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcException.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FunctionRpc.RpcHttp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FunctionRpc.RpcHttp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FunctionRpc.RpcHttp.displayName = 'proto.FunctionRpc.RpcHttp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FunctionRpc.RpcHttp.prototype.toObject = function(opt_includeInstance) {
  return proto.FunctionRpc.RpcHttp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FunctionRpc.RpcHttp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FunctionRpc.RpcHttp.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    body: (f = msg.getBody()) && proto.FunctionRpc.TypedData.toObject(includeInstance, f),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, undefined) : [],
    rawBody: jspb.Message.getFieldWithDefault(msg, 11, ""),
    statusCode: jspb.Message.getFieldWithDefault(msg, 12, ""),
    rawResponse: (f = msg.getRawResponse()) && proto.FunctionRpc.TypedData.toObject(includeInstance, f),
    queryMap: (f = msg.getQueryMap()) ? f.toObject(includeInstance, undefined) : [],
    isRaw: jspb.Message.getFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FunctionRpc.RpcHttp}
 */
proto.FunctionRpc.RpcHttp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FunctionRpc.RpcHttp;
  return proto.FunctionRpc.RpcHttp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FunctionRpc.RpcHttp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FunctionRpc.RpcHttp}
 */
proto.FunctionRpc.RpcHttp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 4:
      var value = new proto.FunctionRpc.TypedData;
      reader.readMessage(value,proto.FunctionRpc.TypedData.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 10:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes);
         });
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawBody(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusCode(value);
      break;
    case 14:
      var value = new proto.FunctionRpc.TypedData;
      reader.readMessage(value,proto.FunctionRpc.TypedData.deserializeBinaryFromReader);
      msg.setRawResponse(value);
      break;
    case 15:
      var value = msg.getQueryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FunctionRpc.RpcHttp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FunctionRpc.RpcHttp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FunctionRpc.RpcHttp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FunctionRpc.RpcHttp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.FunctionRpc.TypedData.serializeBinaryToWriter
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getRawBody();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStatusCode();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRawResponse();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.FunctionRpc.TypedData.serializeBinaryToWriter
    );
  }
  f = message.getQueryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getIsRaw();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.FunctionRpc.RpcHttp.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcHttp.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.FunctionRpc.RpcHttp.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcHttp.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * map<string, string> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.FunctionRpc.RpcHttp.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.FunctionRpc.RpcHttp.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * optional TypedData body = 4;
 * @return {?proto.FunctionRpc.TypedData}
 */
proto.FunctionRpc.RpcHttp.prototype.getBody = function() {
  return /** @type{?proto.FunctionRpc.TypedData} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.TypedData, 4));
};


/** @param {?proto.FunctionRpc.TypedData|undefined} value */
proto.FunctionRpc.RpcHttp.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.FunctionRpc.RpcHttp.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.RpcHttp.prototype.hasBody = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, bytes> params = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.FunctionRpc.RpcHttp.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.FunctionRpc.RpcHttp.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
};


/**
 * optional string raw_body = 11;
 * @return {string}
 */
proto.FunctionRpc.RpcHttp.prototype.getRawBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcHttp.prototype.setRawBody = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string status_code = 12;
 * @return {string}
 */
proto.FunctionRpc.RpcHttp.prototype.getStatusCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.FunctionRpc.RpcHttp.prototype.setStatusCode = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional TypedData raw_response = 14;
 * @return {?proto.FunctionRpc.TypedData}
 */
proto.FunctionRpc.RpcHttp.prototype.getRawResponse = function() {
  return /** @type{?proto.FunctionRpc.TypedData} */ (
    jspb.Message.getWrapperField(this, proto.FunctionRpc.TypedData, 14));
};


/** @param {?proto.FunctionRpc.TypedData|undefined} value */
proto.FunctionRpc.RpcHttp.prototype.setRawResponse = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.FunctionRpc.RpcHttp.prototype.clearRawResponse = function() {
  this.setRawResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FunctionRpc.RpcHttp.prototype.hasRawResponse = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * map<string, string> query = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.FunctionRpc.RpcHttp.prototype.getQueryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


proto.FunctionRpc.RpcHttp.prototype.clearQueryMap = function() {
  this.getQueryMap().clear();
};


/**
 * optional bool is_raw = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FunctionRpc.RpcHttp.prototype.getIsRaw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.FunctionRpc.RpcHttp.prototype.setIsRaw = function(value) {
  jspb.Message.setField(this, 16, value);
};


goog.object.extend(exports, proto.FunctionRpc);
